service: testconvertersapp

frameworkVersion: '2'

provider:
  name: aws
  region: eu-central-1
  runtime: dotnetcore3.1
  memorySize: 128
  lambdaHashingVersion: 20201221

  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - { Ref: FileUploadedTopic }
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource:
        - { "Fn::Join" : [ "", [{ "Fn::GetAtt" : [OriginalBucket, Arn] }, "/*"] ]}
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - { "Fn::Join" : [ "", [{ "Fn::GetAtt" : [ResultBucket, Arn] }, "/*"] ]}
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
         !GetAtt ResultNotificationQueue.Arn

custom:
  stage: ${opt:stage, self:provider.stage}
  
package:
  individually: true

functions:
  FileUploaded:
    handler: Pipeline.FileUploaded::Pipeline.FileUploaded.FileUploadedHandler::OriginalFileUploaded
    timeout: 10
    environment:
      FILE_UPLOADED_TOPIC_ARN: { Ref: FileUploadedTopic }
      RESULT_BUCKET_NAME: { Ref: ResultBucket }
    package:
      artifact: Backend/Pipeline.FileUploaded/bin/Release/netcoreapp3.1/Pipeline.FileUploaded.zip
    events:
      - s3:
          bucket:  { Ref: OriginalBucket }
          event: s3:ObjectCreated:*
          existing: true

  CopyOriginalFile:
    handler: Pipeline.CopyOriginalFile::Pipeline.CopyOriginalFile.ConvertFileHandler::Convert
    timeout: 15
    environment:
      RESULT_NOTIFICATION_QUEUE: { Ref: ResultNotificationQueue }
      CONVERSION_NAME: "Original"
    package:
      artifact: Backend/Pipeline.CopyOriginalFile/bin/Release/netcoreapp3.1/Pipeline.CopyOriginalFile.zip
    events:
     - sqs:
         arn: !GetAtt CopyOriginalFileQueue.Arn

  ProcessConversionResult:
    handler: Pipeline.ProcessResult::Pipeline.ProcessResult.ProcessResultHandler::ProcessResult
    timeout: 15
    package:
      artifact: Backend/Pipeline.ProcessResult/bin/Release/netcoreapp3.1/Pipeline.ProcessResult.zip
    events:
     - sqs:
         arn: !GetAtt ResultNotificationQueue.Arn

  GetFilesList:
    handler: Pipeline.GetFilesList::Pipeline.GetFilesList.GetFileListHandler::GetFilesList
    package:
      artifact: Backend/Pipeline.GetFilesList/bin/Release/netcoreapp3.1/Pipeline.GetFilesList.zip
    events:
      - http:
          cors: true
          path: /getFilesList
          method: get
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  #DummyConvert:
  #  image: <image>
  #  events:
  #   - sqs:
  #       arn: !GetAtt DummyConverterQueue.Arn

resources:
  Outputs:
    Region:
      Value: "${self:provider.region}"
    OriginalBucket:
      Value: { Ref: OriginalBucket }
    ResultBucket:
      Value: { Ref: ResultBucket }
    UserPoolId:
      Value: !Ref UserPool
    UserPoolAppClientId:
      Value: !Ref UserPoolClient
    HttpEndpoint:
      Value: { "Fn::Join" :["", ["https://", { Ref: ApiGatewayRestApi }, ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}"]]} 

  Resources:
    OriginalBucket:
      Type: "AWS::S3::Bucket"

    ResultBucket:
      Type: "AWS::S3::Bucket"

    FileUploadedTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "testconvertersapp-FileUploaded"

    ResultNotificationQueue:
      Type: "AWS::SQS::Queue"

    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true

    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        UserPoolId: !Ref UserPool
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders:
          - "COGNITO"
        AllowedOAuthFlows:
          - implicit
        CallbackURLs:
          - "http://localhost:8080/"
        LogoutURLs:
          - "http://localhost:8080/"
        AllowedOAuthScopes:
          - "email"
          - "openid"
          - "profile"

    MyApiGatewayAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: MyCognitoAuthorizer
        RestApiId: { Ref: ApiGatewayRestApi }
        Type: COGNITO_USER_POOLS
        ProviderARNs: 
          - !GetAtt 'UserPool.Arn'

    # Copy original file queue
    CopyOriginalFileQueue:
      Type: "AWS::SQS::Queue"
      
    CopyOriginalFileQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: Allow-SNS-SendMessage
            Effect: Allow
            Principal: "*"
            Action:
              - sqs:SendMessage
            Resource: !GetAtt CopyOriginalFileQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref FileUploadedTopic
        Queues:
          - !Ref CopyOriginalFileQueue

    CopyOriginalFileQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt CopyOriginalFileQueue.Arn
        Region: "${self:provider.region}"
        TopicArn: !Ref FileUploadedTopic
        RawMessageDelivery: 'true'