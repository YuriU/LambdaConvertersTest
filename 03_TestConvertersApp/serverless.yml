service: testconvertersapp
frameworkVersion: '2'

provider:
  name: aws
  region: eu-central-1
  runtime: dotnetcore3.1
  memorySize: 128
  lambdaHashingVersion: 20201221

  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - { Ref: FileUploadedTopic }
    - Effect: Allow
      Action:
        - s3:DeleteObject
        - s3:PutObject
        - s3:GetObject
      Resource:
        - { "Fn::Join" : [ "", [{ "Fn::GetAtt" : [UploadOriginalBucket, Arn] }, "/*"] ]}
    - Effect: Allow
      Action:
        - s3:DeleteObject
        - s3:PutObject
        - s3:GetObject
      Resource:
        - { "Fn::Join" : [ "", [{ "Fn::GetAtt" : [UploadResultBucket, Arn] }, "/*"] ]}
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        - { "Fn::Join" : [ "", [{ "Fn::GetAtt" : [ResultBucket, Arn] }, "/*"] ]}
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
         !GetAtt ResultNotificationQueue.Arn
    - Effect: Allow
      Action:
      - dynamodb:DescribeStream
      - dynamodb:GetRecords
      - dynamodb:Scan
      - dynamodb:GetShardIterator
      - dynamodb:ListStreams
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:Query
      - dynamodb:BatchWriteItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
      Resource:
        - !GetAtt ConversionJobsTable.Arn
        - { "Fn::Join" : [ "/", [{ "Fn::GetAtt" : [ConversionJobsTable, Arn] }, "index/*"] ]}
        - !GetAtt WebSocketConnectionsTable.Arn
        - { "Fn::Join" : [ "/", [{ "Fn::GetAtt" : [WebSocketConnectionsTable, Arn] }, "index/*"] ]}

custom:
  stage: ${opt:stage, self:provider.stage}
  
package:
  individually: true
  exclude:
    - Frontend/**
    - Scripts/**
    - resources/**
    - Backend_dotnet/**
    - package.json
    - package-lock.json
    - node_modules/**
    - build_backend.sh
    - create_user.sh
    - build_backend.sh

functions:
  FileUploaded:
    # .Net handler registration
    #handler: Pipeline.FileUploaded::Pipeline.FileUploaded.FileUploadedHandler::OriginalFileUploaded
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.FileUploaded/bin/Release/netcoreapp3.1/Pipeline.FileUploaded.zip

    # NodeJs Handler registration
    runtime: nodejs12.x
    handler: Backend_node/pipeline_handler.fileUploaded

    environment:
      FILE_UPLOADED_TOPIC_ARN: { Ref: FileUploadedTopic }
      RESULT_BUCKET_NAME: { Ref: ResultBucket }
      UPLOAD_RESULT_BUCKET_NAME: { Ref: UploadResultBucket }
      CONVERSION_JOBS_TABLE_NAME: { Ref: ConversionJobsTable }
    events:
      - s3:
          bucket:  { Ref: UploadOriginalBucket }
          event: s3:ObjectCreated:*
          existing: true

  CopyOriginalFile:
    # .Net handler registration
    handler: Pipeline.CopyOriginalFile::Pipeline.CopyOriginalFile.ConvertFileHandler::Convert
    timeout: 15
    environment:
      RESULT_NOTIFICATION_QUEUE: { Ref: ResultNotificationQueue }
      CONVERSION_NAME: "Copy"
    package:
      artifact: Backend_dotnet/Pipeline.CopyOriginalFile/bin/Release/netcoreapp3.1/Pipeline.CopyOriginalFile.zip
    events:
     - sqs:
         arn: !GetAtt CopyOriginalFileQueue.Arn

  ProcessConversionResult:
    # .Net handler registration
    #handler: Pipeline.ProcessResult::Pipeline.ProcessResult.ProcessResultHandler::ProcessResult
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.ProcessResult/bin/Release/netcoreapp3.1/Pipeline.ProcessResult.zip

    # NodeJs Handler registration
    runtime: nodejs12.x
    handler: Backend_node/pipeline_handler.processResult

    environment:
      CONVERSION_JOBS_TABLE_NAME: { Ref: ConversionJobsTable }
      RESULT_BUCKET_NAME: { Ref: ResultBucket }
      UPLOAD_RESULT_BUCKET_NAME: { Ref: UploadResultBucket }
    events:
     - sqs:
         arn: !GetAtt ResultNotificationQueue.Arn

  GetJobsList:
    # .Net handler registration
    #handler: Pipeline.GetJobsList::Pipeline.GetJobsList.GetJobsListHandler::GetJobsList
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.GetJobsList/bin/Release/netcoreapp3.1/Pipeline.GetJobsList.zip

    # NodeJsHandler registration
    runtime: nodejs12.x
    handler: Backend_node/api_handler.getJobs

    environment:
      CONVERSION_JOBS_TABLE_NAME: { Ref: ConversionJobsTable }
    events:
      - http:
          cors: true
          path: /getJobsList
          method: get
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  GetDownloadUrl:
    # .Net handler registration
    #handler: Pipeline.GetDownloadUrl::Pipeline.GetDownloadUrl.GetDownloadUrlHandler::GetDownloadUrl
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.GetDownloadUrl/bin/Release/netcoreapp3.1/Pipeline.GetDownloadUrl.zip

    # NodeJsHandler registration
    runtime: nodejs12.x
    handler: Backend_node/api_handler.getDownloadUrl

    environment:
      RESULT_BUCKET_NAME: { Ref: ResultBucket }
      CONVERSION_JOBS_TABLE_NAME: { Ref: ConversionJobsTable }
    events:
      - http:
          cors: true
          path: /getDownloadUrl
          method: get
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  GetUploadUrl:
    # .Net handler registration
    #handler: Pipeline.GetUploadUrl::Pipeline.GetUploadUrl.GetUploadUrlHandler::GetUploadUrl
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.GetUploadUrl/bin/Release/netcoreapp3.1/Pipeline.GetUploadUrl.zip

    # NodeJsHandler registration
    runtime: nodejs12.x
    handler: Backend_node/api_handler.getUploadUrl

    environment:
      UPLOAD_ORIGINAL_BUCKET_NAME: { Ref: UploadOriginalBucket }
    events:
      - http:
          cors: true
          path: /getUploadUrl
          method: get
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  DeleteJob:
    # .Net handler registration
    #handler: Pipeline.DeleteJob::Pipeline.DeleteJob.DeleteJobHandler::DeleteJob
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.DeleteJob/bin/Release/netcoreapp3.1/Pipeline.DeleteJob.zip

    # NodeJsHandler registration
    runtime: nodejs12.x
    handler: Backend_node/api_handler.deleteJob

    environment:
      UPLOAD_ORIGINAL_BUCKET_NAME: { Ref: UploadOriginalBucket }
      CONVERSION_JOBS_TABLE_NAME: { Ref: ConversionJobsTable }
    events:
      - http:
          cors: true
          path: /deleteJob
          method: delete
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  ###########################################################################
  # WebSocket handlers
  WebSocketConnect:
    # .Net handler registration
    #handler: Pipeline.WebSockets::Pipeline.WebSockets.WebSocketHandler::Connected
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.WebSockets/bin/Release/netcoreapp3.1/Pipeline.WebSockets.zip

    # NodeJsHandler registration
    runtime: nodejs12.x
    handler: Backend_node/web_socket_handler.connectHandler

    environment:
      CONNECTIONS_TABLE_NAME: { Ref: WebSocketConnectionsTable }
    events:
      - websocket:
          route: $connect

  WebSocketDisconnect:
    # .Net handler registration
    #handler: Pipeline.WebSockets::Pipeline.WebSockets.WebSocketHandler::Disconnected
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.WebSockets/bin/Release/netcoreapp3.1/Pipeline.WebSockets.zip

    # NodeJsHandler registration
    runtime: nodejs12.x
    handler: Backend_node/web_socket_handler.disconnectHandler
    environment:
      CONNECTIONS_TABLE_NAME: { Ref: WebSocketConnectionsTable }
    events:
      - websocket:
          route: $disconnect

  WebSocketDefault:
    # .Net handler registration
    #handler: Pipeline.WebSockets::Pipeline.WebSockets.WebSocketHandler::Default
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.WebSockets/bin/Release/netcoreapp3.1/Pipeline.WebSockets.zip

    # NodeJsHandler registration
    runtime: nodejs12.x
    handler: Backend_node/web_socket_handler.defaultHandler

    environment:
      CONNECTIONS_TABLE_NAME: { Ref: WebSocketConnectionsTable }
    events:
      - websocket:
          route: $default

  JobsTableStream:
    # .Net handler registration
    #handler: Pipeline.ProcessJobTableStream::Pipeline.ProcessJobTableStream.DBStreamHandler::ProcessEvent
    #timeout: 15
    #package:
    #  artifact: Backend_dotnet/Pipeline.ProcessJobTableStream/bin/Release/netcoreapp3.1/Pipeline.ProcessJobTableStream.zip

    # NodeJsHandler registration
    runtime: nodejs12.x
    handler: Backend_node/web_socket_handler.jobsTableStreamHandler

    environment:
      CONNECTIONS_TABLE_NAME: { Ref: WebSocketConnectionsTable }
      WS_GATEWAY_ENDPOINT: { "Fn::Join" :["", ["https://", { Ref: WebsocketsApi }, ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}"]]}
    events:
      - stream:
          type: dynamodb
          arn: {"Fn::GetAtt": [ConversionJobsTable, StreamArn]}

resources:
  Outputs:
    Region:
      Value: "${self:provider.region}"
    UploadOriginalBucket:
      Value: { Ref: UploadOriginalBucket }
    UploadResultBucket:
      Value: { Ref: UploadResultBucket }
    ResultBucket:
      Value: { Ref: ResultBucket }
    UserPoolId:
      Value: !Ref UserPool
    UserPoolAppClientId:
      Value: !Ref UserPoolClient
    HttpEndpoint:
      Value: { "Fn::Join" :["", ["https://", { Ref: ApiGatewayRestApi }, ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}"]]} 
    WebSocketEndpoint:
      Value: { "Fn::Join" :["", ["wss://", { Ref: WebsocketsApi }, ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}"]]}
    WebSiteBucket:
      Value: { Ref: WebSiteBucket }
    WebSiteUrl:
      Value: { "Fn::GetAtt": [WebSiteBucket, WebsiteURL] }
    FileUploadedTopic:
      Value: { Ref: FileUploadedTopic }
    ResultNotificationQueue:
      Value: { Ref: ResultNotificationQueue }

  Resources:
    UploadOriginalBucket:
      Type: "AWS::S3::Bucket"
      Properties:
         CorsConfiguration:
            CorsRules:
              -
                AllowedOrigins: 
                  - "*"
                AllowedMethods: 
                  - PUT
                AllowedHeaders: 
                  - "*"

    UploadResultBucket:
      Type: "AWS::S3::Bucket"

    ResultBucket:
      Type: "AWS::S3::Bucket"
      Properties:
         CorsConfiguration:
            CorsRules:
              -
                AllowedOrigins: 
                  - "*"
                AllowedMethods: 
                  - GET
                AllowedHeaders: 
                  - "*"

    FileUploadedTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: "testconvertersapp-FileUploaded"

    ResultNotificationQueue:
      Type: "AWS::SQS::Queue"

    ConversionJobsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    WebSocketConnectionsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true

    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        UserPoolId: !Ref UserPool
        AllowedOAuthFlowsUserPoolClient: true
        SupportedIdentityProviders:
          - "COGNITO"
        AllowedOAuthFlows:
          - implicit
        CallbackURLs:
          - "http://localhost:8080/"
        LogoutURLs:
          - "http://localhost:8080/"
        AllowedOAuthScopes:
          - "email"
          - "openid"
          - "profile"

    MyApiGatewayAuthorizer: 
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: MyCognitoAuthorizer
        RestApiId: { Ref: ApiGatewayRestApi }
        Type: COGNITO_USER_POOLS
        ProviderARNs: 
          - !GetAtt 'UserPool.Arn'
          
    WebSiteBucket:
        Type: "AWS::S3::Bucket"
        Properties:
          WebsiteConfiguration:
            ErrorDocument: index.html
            IndexDocument: index.html
            

    # Copy original file queue
    CopyOriginalFileQueue:
      Type: "AWS::SQS::Queue"
      
    CopyOriginalFileQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: Allow-SNS-SendMessage
            Effect: Allow
            Principal: "*"
            Action:
              - sqs:SendMessage
            Resource: !GetAtt CopyOriginalFileQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref FileUploadedTopic
        Queues:
          - !Ref CopyOriginalFileQueue

    CopyOriginalFileQueueSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt CopyOriginalFileQueue.Arn
        Region: "${self:provider.region}"
        TopicArn: !Ref FileUploadedTopic
        RawMessageDelivery: 'true'
